import { Telegraf } from "telegraf-ts";
import config from "../config";
import { TonService } from "./ton.service";
import { colorByRarity, Nft, rarityPosition } from "../models/types";
import moment from "moment";
import base64 from "base-64";
import { Address } from 'ton';
import { ChatMembersService } from "./chat-members.service";
import { ChatWatchdogService } from "./chat-watchdog.service";

const CHECK_TXN_ACTION = "check-txn-from-user-to-register"

export class BotService {

    private static bot: Telegraf<any>;

    private static addressOtp: { [address: string]: number } = {};

    private static userAddress: { [tgUserId: string]: string } = {};

    static async start() {
        console.log("Bot started!");

        this.bot = new Telegraf(config.BOT_TOKEN);

        // await ChatMembersService.init();
        // await ChatWatchdogService.start(this.bot);
        // this.bindOnStart();
        // this.bindOnText();
        // this.bindOnCheckTxn();

        this.bot.launch()
    }


    private static bindOnStart() {
        this.bot.start((ctx) => {
            ctx.reply('–•—ç–π, –¥—Ä—É–∂–∏—â–µ!\n–ï—Å–ª–∏ —Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—á–µ—à—å –≤ —ç—Ç–æ—Ç –∑–∞–∫—Ä—ã—Ç—ã–π –∫–ª—É–±, –ø—Ä–µ–¥—ä—è–≤–∏ —Å–≤–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏–∫–∏üòé\n *–æ—Ç–ø–∞—Ä–≤—å –∞–¥—Ä–µ—Å —Å–≤–æ–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞*\n\n–£ —Ç–µ–±—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –Ω–∞—à NFT + –Ω–µ –Ω–∞ –ø—Ä–æ–¥–∞–∂–µ!');
        });
    }

    private static bindOnText() {
        this.bot.on('text', async (ctx) => {
            const address = ctx.message.text;
            const tgUserId = ctx.message.from.id;

            if (ChatMembersService.chatMemberByUserId[tgUserId]) {
                await ctx.reply("–î–∞ —É—Å–ø–æ–∫–æ–π—Å—è, —Ç—ã —É–∂–µ –≤ –±–∞–Ω–¥–µ üòâ");
                return;
            }

            try {
                const nfts = await TonService.getNftsFromTargetCollection(address);

                if (!nfts.length) {
                    await ctx.reply("–û—É, –¥—Ä—É–∂–∏—â–µ, –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ —É —Ç–µ–±—è –Ω–∞—à–∏—Ö NFT.")
                    return;
                }

                const targetOtp = moment().unix();

                this.addressOtp[address] = targetOtp;

                this.userAddress[tgUserId] = address;

                await ctx.reply(this.prepareMsgWithNft(nfts, targetOtp), {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å",
                                    url: this.createPayTonkeeperUrl(TonService.formatBalanceFromView(config.PAYMENT_FROM_VIRGIN), targetOtp)
                                },
                                {
                                    text: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å",
                                    callback_data: CHECK_TXN_ACTION
                                }
                            ],
                        ]
                    }
                })
            } catch (e) {
                await ctx.reply(`–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã: ${e.message}!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!`)
            }
        });
    }

    private static bindOnCheckTxn() {
        this.bot.action(CHECK_TXN_ACTION, async (ctx) => {
            const txns = await TonService.getTxns(config.OWNER_ADDRESS);

            const hasTxn = txns.reverse().find(txn => {
                const decodedRawMsg = base64.decode(txn.in_msg.msg_data);
                const otp = decodedRawMsg.slice(decodedRawMsg.length - 9)
                const address = Address.parseRaw(txn.in_msg.destination.address);
                return this.addressOtp[address.toString()] === +otp;
            });

            if (hasTxn) {
                const tgUserId = ctx.message.from.id;
                const address = this.userAddress[tgUserId];

                await ChatMembersService.saveChatMember({ tgUserId, address, })

                const chatLink = await this.bot.telegram.exportChatInviteLink(config.CHAT_ID);
                ctx.reply(`–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —Ç—ã —á–∞—Å—Ç—å –Ω–∞—à–µ–π –æ–±–µ–∑—å—è–Ω—å–µ–π –±—Ä–∞—Ç–≤—ã!\n\n–ü—Ä–∏—Å–æ–¥–∏–Ω—è–π—Å—è –∫ <a href="${chatLink}">${config.TWA_CHAT_NAME}</a>`, {
                    parse_mode: "HTML"
                })
                return;
            }

            ctx.reply("–•–º... –ö–∞–∂–µ—Ç—Å—è, —Ç–≤–æ—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –µ—â—ë –Ω–µ –ø—Ä–∏—à–ª–∞.\n–ü–æ–ø—Ä–æ–±—É–π –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —á—É—Ç—å –ø–æ–∑–∂–µ.")
        });
    }

    private static prepareMsgWithNft(nfts: Nft[], otp: number): string {
        const nftNames = nfts
            .sort((a, b) => {
                const rarityPositionA = rarityPosition[a.metadata.attributes[0].value];
                const rarityPositionB = rarityPosition[b.metadata.attributes[0].value];

                if (rarityPositionA <= rarityPositionB) {
                    return -1
                }
                return 1;
            })
            .map(it => `${colorByRarity[it.metadata.attributes[0].value]} ${it.metadata.name}\n`)
            .join("");

        const endText = `–û–∫–µ–π, —Ç–µ–ø–µ—Ä—å –¥–∞–≤–∞–π —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç—ã - —ç—Ç–æ —Ç—ã.\n–û—Ç–ø—Ä–∞–≤—å 0.001 TON (—ç—Ç–æ –¥–∞–∂–µ –Ω–µ —Ä—É–±–ª—å üòâ) –Ω–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å ${config.OWNER_ADDRESS} –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º: ${otp}`

        if (nftNames.length === 1) {
            return `O—É, –¥–∞ —Ç—ã —É –Ω–∞—Å –Ω–æ–≤–∏—á—ë–∫!\n\n${nftNames}\n–ù—É, –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ!\n${endText}`
        }

        if (nftNames.length > 2 && nftNames.length < 5) {
            return `–ú–∏–ª–æ—Å—Ç–∏ –ø—Ä–æ—Å–∏–º, —Å–æ–±—Ä–∞—Ç!\n\n${nftNames}\n–ù—É, –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ!\n${endText}`
        }

        return `–î–ª—è —Ç–∞–∫–∏—Ö –≥–æ—Å–ø–æ–¥, –∫–∞–∫ –≤—ã, –º–µ—Å—Ç–µ—á–Ω–æ –≤—Å–µ–≥–¥–∞ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ!\n\n${nftNames}\n${endText}`
    }

    private static createPayTonkeeperUrl(amount: number, text: number) {
        return `https://app.tonkeeper.com/transfer/${config.OWNER_ADDRESS}?amount=${amount}&text=${text}`;
    }

    private static async showUpdates() {
        const updates = await this.bot.telegram.getUpdates();
        console.log(updates)
        console.log(JSON.stringify(updates))
    }
}
